	<td markdown="block">
{% comment %}
* [About Class #03](slides/03/meta.html)

## Where Are We?
* first week was supposed to be control structures
    * aaand turtle!
    * aaand a little bit about python modules
* this week, we're going to look at data structures more in-depth
    * strings, lists, tuples, etc.
* but first, stuff we missed...
    * appoximating pi (more control structures, motivation for turtle)
        * archimedes method
        * monte carlo
    * package management
    * one last thing re: control strucutres - exceptions
* about the book
## Homework #01
* demo game
    * collision detection can be a little off (it's ok)
    * how to stop animation?
    * more difficult plz? extra features... score, text, reset, more than 1 rectangle
* monte carlo (we'll take a look again later?)
    * finish program

## Also abt Homework #1 / Style

* the book's coding style does not follow PEP-8 (convention for Python)
* please use underscores to separate words

## Next Class
* in class group activity for list comprehensions, hof, maybe decrypt a message, etc.
* finish up data structures



* [Approximating Pi](slides/03/pi.html)
## how to approximate pi?

* consider that C = 2&pi;r
* we can get pi by ... &pi; = C / 2r or &pi; = C / 2 (if unit circle, or circle with radius 1)

## Archimedes
* remember our draw_poly program?
* radius 1
* that's pretty close to a circle
* so... if we get the perimeter of that polygon, we can calculate pi by perimeter / 2

## How?

* find perimeter of polygon
* how?
* create right triangle
* half angle to get half length of size
* <code>math.sin(a)</code> (a is angle in radians)
* <code>math.radians(a)</code> convert degrees a to radians
* use math module

## Sample

<pre><code data-trim contenteditable>
import math
num_sides = int(input('how many sides?'))
inner_angle = 360 / num_sides

# figure out how long a side is
# ... half of inner angle (so that we have a right triangle)
half_angle = inner_angle / 2

# ... we'll have half the length of side (sin A = opposite / hypotenuse)
half_s = math.sin(math.radians(half_angle))

# actual side length
s = 2 * half_s

# perimeter
perimeter = num_sides * s

# pi = C / 2
pi = perimeter / 2

print(pi)
</code></pre>

## Monte Carlo simulation
* some method of making use of random numbers to solve mathematical problems
* _usually_, an analytical method of solving the problem may not exist or may be too time consuming / complex / etc.
* these methods weren't so practical until the development of computers __why__?
* one application is to approximate pi

## Plotting with turtle
* <code>wn.setworldcoordinates(llx, lly, urx, ury)</code>
* <code>t.dot(size)</code>
* <code>wn.exitonclick()</code>

* [Modules, matplotlib](slides/03/modules.html)
## Where are Modules?
* find
* mdfind
* PyCharm specific... command B or right-click goto declaration

## site-packages
* there's likely to be a <code>site-packages</code> folder for every version of Python
* it contains the installed modules / packages

## Creating our Own?
* what's a module again?
* sooo ... creating a module is as simple as
* <code>if __name__ == '__main__'</code>
* [some built-ins](https://docs.python.org/3.5/reference/import.html#__name__)

## Installing
* so... a bunch of modules that don't come with Python?
* typically install with _pip_ (modern, but may need to install first)... (or easy_install)
* but this dumps everything into your system's site-packages? ugh? why so bad?

## virtualenv, mkvirtualenv
* tools that allow you to create arbitrary groupings of installed packages, and switch between them when running python
* via pycharm... PyCharm &rarr; preferences &rarr; project &rarr; project interpreter &rarr; gears &rarr; creates a virtualenv
* then install packages using same menu... but use plus button
* via commandline
    * <code>mkvirtualenv</code>
    * <code>workon virtualenv</code>
* show <code>.virtualenv</code> directory

## matplotlib

* plotting library for python
* has an object that mimics matlab (if you're familiar with that!)

## matplotlib minimal 

* install
* import (remember as!) <code>import matplotlib.pyplot as plt</code> ... common convention to call it plt
* plot a point <code>plt.plot(0.25, 0.75, marker='o', color='blue')</code>
    * can also pass Lists (with same num of elements)
* show figure/graph/chart <code>plt.show()</code> 

## matplotlib sample

<pre><code data-trim contenteditable>
import matplotlib.pyplot as plt

plt.plot(0.25, 0.75, marker='o', color='blue')
plt.plot(0.75, 0.75, marker='o', color='blue')

x = 0.25
for i in range(6):
    plt.plot(x, 0.3, marker='o', color='red')
    x += 0.1
plt.show()
</code></pre>


* [Exceptions](slides/03/exceptions.html)

## Causing Errors
* what are some errors we can cause?
* how? take note...

## Syntax
* <code>except Exception</code>
* <code>except ExceptionType</code>
* <code>except ExceptionType1, ExceptionType2</code>
* <code>except ExceptionType1, ExceptionType2 as e</code>
* chained exceptions
* <code>finally</code>

* [Strings](slides/03/meta.html)
## All Operations
* concat, repeat, %
* indexing, slicing
* in, not in

## Methods
* upper, lower, isupper, islower
* index
* replace
* list?
    * . (dot) in pycharm
    * dir in shell

## "Removing" a Character at an Index
* slices, get new string
* replace, get new string
* (other) regular expression, make translation table

## chr, ord
## Transpose Rail

## Substitution

## 

* [Lists](slides/03/lists.html)
## All Operations
## Methods
## enumerate

## working with lists in place
* bubble sort or shuffle?

## every element in a list
## list comprehensions
## map, reduce, filter
## lambda
## sorted
{% endcomment %}


</td>
	<td markdown="block">
</td>
	<td markdown="block">
<!--
* [](assignments/.html)
-->
</td>
